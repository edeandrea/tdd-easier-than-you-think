<templateSet group="TDD: Easier than you think">
  <template name="tdd 6 - petAnnotations" value="@Entity&#10;@Table(name = &quot;pets&quot;)" description="Pet class annotations" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="tdd 4 - petFields" value="@Id&#10;@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = &quot;pets_seq&quot;)&#10;@SequenceGenerator(name = &quot;pets_seq&quot;, allocationSize = 1, sequenceName = &quot;pets_seq&quot;)&#10;private Long id;&#10;private String name;&#10;private String kind;&#10;private String adoptedBy;&#10;&#10;$END$" description="Pet fields" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="tdd 5 - petConstructors" value="public Pet() {&#10;&#10;}&#10;&#10;public Pet(String name, String kind) {&#10;  this(null, name, kind);&#10;}&#10;&#10;public Pet(Long id, String name, String kind) {&#10;&#9;this(id, name, kind, null);&#10;}&#10;&#10;public Pet(Long id, String name, String kind, String adoptedBy) {&#10;&#9;this.id = id;&#10;&#9;this.name = name;&#10;&#9;this.kind = kind;&#10;&#9;this.adoptedBy = adoptedBy;&#10;}$END$" description="Pet constructors" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="tdd 9 - petRepository" value="public List&lt;Pet&gt; findPetsByKind(String kind) {&#10;&#9;return null;$END$&#10;}&#10;&#10;@Transactional&#10;public Optional&lt;Pet&gt; adoptPetIfFound(String kind, String owner) {&#10;&#9;return null;&#10;}" description="Pet Repository" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="tdd 3 - baseConfig" value="# Container image base image for Java 21&#10;quarkus.jib.base-jvm-image=registry.access.redhat.com/ubi9/openjdk-21-runtime:1.23&#10;&#10;# Turn on continuous testing by default&#10;quarkus.test.continuous-testing=enabled&#10;&#10;# Turn on instrumentation-based reload&#10;quarkus.live-reload.instrumentation=true&#10;&#10;# Performance improvement&#10;quarkus.rest.jackson.optimization.enable-reflection-free-serializers=true&#10;&#10;# Logging configuration&#10;%dev,test.quarkus.log.category.&quot;com.example&quot;.level=DEBUG&#10;$END$" description="Pet Prod Hibernate config" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="Properties" value="true" />
      <option name="SCALA" value="false" />
      <option name="SSP" value="false" />
      <option name="XML_ATTRIBUTE" value="false" />
      <option name="sbt" value="false" />
    </context>
  </template>
  <template name="tdd 13 - petkafkaconfig" value="## Kafka configuration&#10;mp.messaging.incoming.adoption-requests.connector=smallrye-kafka&#10;mp.messaging.incoming.adoption-requests.broadcast=true&#10;mp.messaging.incoming.adoption-requests.auto.offset.reset=earliest&#10;&#10;mp.messaging.outgoing.adoptions.connector=smallrye-kafka&#10;&#10;%test.mp.messaging.incoming.adoption-requests.connector=smallrye-in-memory&#10;%test.mp.messaging.outgoing.adoptions.connector=smallrye-in-memory" description="Pet Kafka config" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="Properties" value="true" />
      <option name="SCALA" value="false" />
      <option name="SSP" value="false" />
      <option name="XML_ATTRIBUTE" value="false" />
      <option name="sbt" value="false" />
    </context>
  </template>
  <template name="tdd 7 - importsql" value="INSERT INTO pets (id, name, kind) VALUES (nextval('pets_seq'), 'fluffy', 'cat');&#10;INSERT INTO pets (id, name, kind) VALUES (nextval('pets_seq'), 'herman', 'dog');&#10;INSERT INTO pets (id, name, kind) VALUES (nextval('pets_seq'), 'cutiepie', 'monkey');" description="Pet import.sql" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="SQL_CODE" value="true" />
    </context>
  </template>
  <template name="tdd 14 - adoptionListenerTests" value="@InjectSpy&#10;AdoptionListener adoptionListener;&#10;&#10;@InjectMock&#10;PetRepository petRepository;&#10;&#10;@Inject&#10;@Any&#10;InMemoryConnector inMemoryConnector;&#10;&#10;@BeforeEach&#10;void clearEmitterSinkBeforeEachTest() {&#10;&#9;// Clear the emitter sink between tests&#10;&#9;this.inMemoryConnector.sink(AdoptionListener.ADOPTIONS_CHANNEL_NAME).clear();&#10;}&#10;&#10;@Test&#10;void adoptablePetFound() {&#10;  var pet = new Pet(1L, &quot;fluffy&quot;, &quot;cat&quot;, &quot;Eric&quot;);&#10;&#9;var adoptionRequest = new AdoptionRequest(pet.getAdoptedBy(), pet.getKind());&#10;&#9;&#10;&#9;// Set up mock&#10;&#9;$END$&#10;&#9;&#10;&#9;// Send request to channel&#10;&#9;&#10;&#9;// Create sink&#10;&#9;&#10;&#9;// Wait for messages to arrive in sink&#10;&#9;&#10;&#9;// Perform assertions on received message(s)&#10;&#9;&#10;&#9;// Verify interactions&#10;&#9;&#10;}&#10;&#10;@Test&#10;void adoptablePetNotFound() {&#10;&#9;var pet = new Pet(1L, &quot;fluffy&quot;, &quot;cat&quot;);&#10;&#9;var adoptionRequest = new AdoptionRequest(&quot;Eric&quot;, pet.getKind());&#10;&#10;&#9;// Set up mock&#10;&#9;&#10;&#9;// Send request to channel&#10;&#9;&#10;&#9;// Verify interactions (with timeout)&#10;&#9;&#10;}" description="AdoptionListenerTests" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="tdd - adoptionListenerIT" value="@QuarkusIntegrationTest&#10;@QuarkusTestResource(KafkaCompanionResource.class)&#10;class AdoptionListenerIT {&#10;&#9;@InjectKafkaCompanion&#10;&#9;KafkaCompanion kafkaCompanion;&#10;&#10;&#9;@Test&#10;&#9;void adoptablePetFound() {&#10;&#9;&#9;var pet = getPet();&#10;&#9;&#9;var adoptionRequest = new AdoptionRequest(&quot;Eric&quot;, pet.getKind());&#10;&#10;&#9;&#9;this.kafkaCompanion.produceWithSerializers(ObjectMapperSerializer.class.getName())&#10;&#9;&#9;&#9;.fromRecords(new ProducerRecord&lt;&gt;(AdoptionListener.ADOPTION_REQUESTS_CHANNEL_NAME, adoptionRequest))&#10;&#9;&#9;&#9;.awaitCompletion(Duration.ofSeconds(10));&#10;&#10;&#9;&#9;var adoptionConsumer = this.kafkaCompanion.consumeWithDeserializers(PetDeserializer.class)&#10;&#9;&#9;&#9;.fromTopics(AdoptionListener.ADOPTIONS_CHANNEL_NAME, 1)&#10;&#9;&#9;&#9;.awaitNextRecords(1, Duration.ofSeconds(20));&#10;&#10;&#9;&#9;assertThat(adoptionConsumer.count())&#10;&#9;&#9;&#9;.isEqualTo(1L);&#10;&#10;&#9;&#9;var petFromKafka = adoptionConsumer.getLastRecord().value();&#10;&#10;&#9;&#9;assertThat(petFromKafka)&#10;&#9;&#9;&#9;.isNotNull()&#10;&#9;&#9;&#9;.usingRecursiveComparison()&#10;&#9;&#9;&#9;.isEqualTo(new Pet(pet.getId(), pet.getName(), adoptionRequest.kind(), adoptionRequest.owner()));&#10;&#10;&#9;&#9;assertThat(getPet())&#10;&#9;&#9;&#9;.usingRecursiveComparison()&#10;&#9;&#9;&#9;.isEqualTo(petFromKafka);&#10;&#9;}&#10;&#10;&#9;private Pet getPet() {&#10;&#9;&#9;return get(&quot;/pets/{id}&quot;, 1L)&#10;&#9;&#9;&#9;.then()&#10;&#9;&#9;&#9;.statusCode(Status.OK.getStatusCode())&#10;&#9;&#9;&#9;.contentType(ContentType.JSON)&#10;&#9;&#9;&#9;.extract().body()&#10;&#9;&#9;&#9;.as(Pet.class);&#10;&#9;}&#10;&#10;&#9;public static class PetDeserializer extends ObjectMapperDeserializer&lt;Pet&gt; {&#10;&#9;&#9;public PetDeserializer() {&#10;&#9;&#9;&#9;super(Pet.class);&#10;&#9;&#9;}&#10;&#9;}&#10;}" description="AdoptionListenerIT" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="tdd 8 - petRepositoryTests" value="$END$&#10;&#10;private void setupTest() {&#10;    // Delete everything from the repo&#10;    this.petRepository.deleteAll();&#10;&#9;&#10;&#9;// Assert the repository is empty&#10;    assertThat(this.petRepository.count())&#10;      .isZero();&#10;}&#10;&#10;@Test&#10;void petsByKindFound() {&#10;&#9;setupTest();&#10;&#9;&#10;&#9;// Persist a new pet to the repo&#10;    &#10;    &#10;&#9;// Assert that finding the pets by kind returns the correct result&#10;&#9;&#10;}&#10;&#10;@Test&#10;void noPetsByKindFound() {&#10;&#9;setupTest();&#10;&#9;&#10;&#9;// Assert that finding the pets by kind returns empty&#10;&#9;&#10;}&#10;&#10;@Test&#10;void adoptFoundPet() {&#10;&#9;setupTest();&#10;&#10;&#9;// Persist some pets&#10;&#10;&#9;// Assert that adopting a found pet is correct&#10;&#9;&#10;}&#10;&#9;&#10;@Test&#10;void noAdoptablePetFound() {&#10;    setupTest();&#10;    &#10;&#9;// Persist some pets&#10;&#9;&#10;&#9;// Assert that no pet is found for adoption&#10;&#9;&#10;}" description="PetRepositoryTests" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="tdd 10 - petResourceTests" value="&#10;&#10;@Test&#10;void getAll() {&#10;  // Set up mock to return a pet when repo.listAll() is called&#10;  $END$&#10;&#10;&#9;// Execute GET to /pets &amp; assert&#10;&#10;&#9;// Verify interactions&#10;&#9;&#10;}&#10;&#10;@Test&#10;void getByKind() {&#10;&#9;// Set up mock to return a pet when repo.findPetsByKind(&quot;cat&quot;) is called&#10;&#10;&#9;// Execute GET to /pets?kind=cat &amp; assert&#10;&#10;&#9;// Verify interactions&#10;&#9;&#10;}&#10;&#10;@Test&#10;void getByIdFound() {&#10;&#9;// Set up mock to return a pet when repo.findByIdOptional(1) is called&#10;&#10;&#9;// Execute GET to /pets/1 &amp; assert OK&#10;&#10;&#9;// Verify interactions&#10;&#9;&#9;&#10;}&#10;&#10;@Test&#10;void getByIdNotFound() {&#10;&#9;// Set up mock to return empty when repo.findByIdOptional(1) is called&#10;&#10;&#9;// Execute GET to /pets/1 &amp; assert NOT_FOUND&#10;&#10;&#9;// Verify interactions&#10;&#9;&#10;}" description="PetResourceTests" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="tdd - petResourceIT" value="@QuarkusIntegrationTest&#10;class PetResourceIT {&#10;&#9;private static final int NUM_RECORDS = 3;&#10;&#10;&#9;@Test&#10;&#9;void getAll() {&#10;&#9;&#9;var pets = get(&quot;/pets&quot;)&#10;&#9;&#9;&#9;.then()&#10;&#9;&#9;&#9;.contentType(ContentType.JSON)&#10;&#9;&#9;&#9;.statusCode(OK.getStatusCode())&#10;&#9;&#9;&#9;.extract()&#10;&#9;&#9;&#9;.body()&#10;&#9;&#9;&#9;.jsonPath().getList(&quot;.&quot;, Pet.class);&#10;&#10;&#9;&#9;assertThat(pets)&#10;&#9;&#9;&#9;.isNotNull()&#10;&#9;&#9;&#9;.hasSize(NUM_RECORDS)&#10;&#9;&#9;&#9;.extracting(Pet::getName, Pet::getKind)&#10;&#9;&#9;&#9;.containsExactlyInAnyOrder(&#10;&#9;&#9;&#9;&#9;tuple(&quot;fluffy&quot;, &quot;cat&quot;),&#10;&#9;&#9;&#9;&#9;tuple(&quot;herman&quot;, &quot;dog&quot;),&#10;&#9;&#9;&#9;&#9;tuple(&quot;cutiepie&quot;, &quot;monkey&quot;)&#10;&#9;&#9;&#9;);&#10;&#9;}&#10;&#10;&#9;@Test&#10;&#9;void getByKind() {&#10;&#9;&#9;get(&quot;/pets?kind={kind}&quot;, &quot;cat&quot;)&#10;&#9;&#9;&#9;.then()&#10;&#9;&#9;&#9;.contentType(ContentType.JSON)&#10;&#9;&#9;&#9;.statusCode(OK.getStatusCode())&#10;&#9;&#9;&#9;.body(&quot;$.size()&quot;, is(1))&#10;&#9;&#9;&#9;.body(&quot;[0].name&quot;, is(&quot;fluffy&quot;))&#10;&#9;&#9;&#9;.body(&quot;[0].kind&quot;, is(&quot;cat&quot;));&#10;&#9;}&#10;&#10;&#9;@Test&#10;&#9;void getByIdFound() {&#10;&#9;&#9;get(&quot;/pets/{id}&quot;, 1L)&#10;&#9;&#9;&#9;.then()&#10;&#9;&#9;&#9;.contentType(ContentType.JSON)&#10;&#9;&#9;&#9;.statusCode(OK.getStatusCode())&#10;&#9;&#9;&#9;.body(&quot;name&quot;, is(&quot;fluffy&quot;))&#10;&#9;&#9;&#9;.body(&quot;kind&quot;, is(&quot;cat&quot;));&#10;&#9;}&#10;&#10;&#9;@Test&#10;&#9;void getByIdNotFound() {&#10;&#9;&#9;get(&quot;/pets/{id}&quot;, NUM_RECORDS + 1)&#10;&#9;&#9;&#9;.then()&#10;&#9;&#9;&#9;.statusCode(NOT_FOUND.getStatusCode())&#10;&#9;&#9;&#9;.body(blankOrNullString());&#10;&#9;}&#10;}&#10;" description="PetResourceIT" toReformat="false" toShortenFQNames="true" useStaticImport="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="tdd 2 - pomTestDeps" value="&lt;dependency&gt;&#10;&#9;&lt;groupId&gt;io.quarkus&lt;/groupId&gt;&#10;&#9;&lt;artifactId&gt;quarkus-junit5-mockito&lt;/artifactId&gt;&#10;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&lt;/dependency&gt;&#10;&lt;dependency&gt;&#10;&#9;&lt;groupId&gt;org.assertj&lt;/groupId&gt;&#10;&#9;&lt;artifactId&gt;assertj-core&lt;/artifactId&gt;&#10;&#9;&lt;version&gt;3.27.4&lt;/version&gt;&#10;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&lt;/dependency&gt;&#10;&lt;dependency&gt;&#10;  &lt;groupId&gt;io.rest-assured&lt;/groupId&gt;&#10;&#9;&lt;artifactId&gt;rest-assured&lt;/artifactId&gt;&#10;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&lt;/dependency&gt;" description="Test deps for pom.xml" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
    </context>
  </template>
  <template name="tdd 12 - pomKafkaTestDeps" value="&lt;dependency&gt;&#10;&#9;&lt;groupId&gt;io.smallrye.reactive&lt;/groupId&gt;&#10;&#9;&lt;artifactId&gt;smallrye-reactive-messaging-in-memory&lt;/artifactId&gt;&#10;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&lt;/dependency&gt;&#10;&lt;dependency&gt;&#10;&#9;&lt;groupId&gt;io.quarkus&lt;/groupId&gt;&#10;&#9;&lt;artifactId&gt;quarkus-test-kafka-companion&lt;/artifactId&gt;&#10;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&#9;&lt;exclusions&gt;&#10;&#9;  &lt;exclusion&gt;&#10;&#9;    &lt;groupId&gt;junit&lt;/groupId&gt;&#10;&#9;    &lt;artifactId&gt;junit&lt;/artifactId&gt;&#10;&#9;  &lt;/exclusion&gt;&#10;&#9;&lt;/exclusions&gt;&#10;&lt;/dependency&gt;&#10;&lt;dependency&gt;&#10;&#9;&lt;groupId&gt;org.awaitility&lt;/groupId&gt;&#10;&#9;&lt;artifactId&gt;awaitility&lt;/artifactId&gt;&#10;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&lt;/dependency&gt;" description="Test deps for Kafka in pom.xml" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
    </context>
  </template>
  <template name="tdd 15 - adoptionListenerFields" value="static final String ADOPTIONS_CHANNEL_NAME = &quot;adoptions&quot;;&#10;static final String ADOPTION_REQUESTS_CHANNEL_NAME = &quot;adoption-requests&quot;;&#10;" description="AdoptionListener fields" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="tdd 16 - adoptionListenerHandleAdoptionAnnotations" value="@Incoming(ADOPTION_REQUESTS_CHANNEL_NAME)&#10;@RunOnVirtualThread" description="Adoption Listener handleAdoption method annotations" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="tdd 11 - petResourceTestsOthers" value="@Test&#10; void getByKind() {&#10;&#9;// Set up mock to return a pet when repo.findPetsByKind(&quot;cat&quot;) is called&#10;&#9;when(this.petRepository.findPetsByKind(&quot;cat&quot;))&#10;&#9;&#9;.thenReturn(List.of(new Pet(1L, &quot;fluffy&quot;, &quot;cat&quot;, &quot;Eric&quot;)));&#10;&#10;&#9;// Execute GET to /pets?kind=cat &amp; assert&#10;&#9;get(&quot;/pets?kind={kind}&quot;, &quot;cat&quot;).then()&#10;&#9;&#9;.contentType(ContentType.JSON)&#10;&#9;&#9;.statusCode(OK.getStatusCode())&#10;&#9;&#9;.body(&quot;$.size()&quot;, is(1))&#10;&#9;&#9;.body(&quot;[0].name&quot;, is(&quot;fluffy&quot;))&#10;&#9;&#9;.body(&quot;[0].kind&quot;, is(&quot;cat&quot;))&#10;&#9;&#9;.body(&quot;[0].adoptedBy&quot;, is(&quot;Eric&quot;));&#10;&#10;&#9;// Verify interactions&#10;&#9;verify(this.petRepository).findPetsByKind(&quot;cat&quot;);&#10;&#9;verifyNoMoreInteractions(this.petRepository);&#10;}&#10;&#10;@Test&#10;void getByIdFound() {&#10;&#9;// Set up mock to return a pet when repo.findByIdOptional(1) is called&#10;&#9;when(this.petRepository.findByIdOptional(1L))&#10;&#9;&#9;.thenReturn(Optional.of(new Pet(1L, &quot;fluffy&quot;, &quot;cat&quot;, &quot;Eric&quot;)));&#10;&#10;&#9;// Execute GET to /pets/1 &amp; assert OK&#10;&#9;get(&quot;/pets/{id}&quot;, 1L).then()&#10;&#9;&#9;.contentType(ContentType.JSON)&#10;&#9;&#9;.statusCode(OK.getStatusCode())&#10;&#9;&#9;.body(&quot;name&quot;, is(&quot;fluffy&quot;))&#10;&#9;&#9;.body(&quot;kind&quot;, is(&quot;cat&quot;))&#10;&#9;&#9;.body(&quot;adoptedBy&quot;, is(&quot;Eric&quot;));&#10;&#10;&#9;// Verify interactions&#10;&#9;verify(this.petRepository).findByIdOptional(1L);&#10;&#9;verifyNoMoreInteractions(this.petRepository);&#10;}&#10;&#10;@Test&#10;void getByIdNotFound() {&#10;&#9;// Set up mock to return empty when repo.findByIdOptional(1) is called&#10;&#9;when(this.petRepository.findByIdOptional(1L))&#10;&#9;&#9;.thenReturn(Optional.empty());&#10;&#10;&#9;// Execute GET to /pets/1 &amp; assert NOT_FOUND&#10;&#9;get(&quot;/pets/{id}&quot;, 1L).then()&#10;&#9;&#9;.statusCode(NOT_FOUND.getStatusCode())&#10;&#9;&#9;.body(blankOrNullString());&#10;&#10;&#9;// Verify interactions&#10;&#9;verify(this.petRepository).findByIdOptional(1L);&#10;&#9;verifyNoMoreInteractions(this.petRepository);&#10;}" description="PetResourceTests other tests" toReformat="false" toShortenFQNames="true" useStaticImport="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="tdd 1 - pomOtelDeps" value="&lt;dependency&gt;&#10;  &lt;groupId&gt;io.opentelemetry.instrumentation&lt;/groupId&gt;&#10;&#9;&lt;artifactId&gt;opentelemetry-jdbc&lt;/artifactId&gt;&#10;&lt;/dependency&gt;&#10;&lt;!--&#10;&lt;dependency&gt;&#10;  &lt;groupId&gt;io.quarkus&lt;/groupId&gt;&#10;  &lt;artifactId&gt;quarkus-observability-devservices-lgtm&lt;/artifactId&gt;&#10;  &lt;scope&gt;provided&lt;/scope&gt;&#10;&lt;/dependency&gt;&#10;--&gt;" description="OpenTelemetry dependencies for pom.xml" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
    </context>
  </template>
  <template name="tdd 4 - aiPetEntity" value="Create a JPA entity class named `Pet`, stored in the `com.example` package in a file named `Pet.java`. Please include the following fields: &#10;&#10;Long id&#10;String name&#10;String kind&#10;String adoptedBy&#10;&#10;Generate all getters and setters and a toString method. The class should represent a table named &quot;pets&quot;.&#10;&#10;The id field should use a sequence table named &quot;pets_seq&quot; and should have an allocation size of 1 and the @Column annotations are unnecessary.&#10;&#10;Additionally define the following constructors:&#10;- An empty constructor&#10;- A constructor taking name and kind&#10;- A constructor taking id, name, and kind&#10;- A constructor taking all properties&#10;&#10;The constructors should appear between the properties and the getters and setters. List each import independently." description="Prompt to have AI generate Pet class" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="ANY_OPENAPI_JSON_FILE" value="false" />
      <option name="ANY_OPENAPI_YAML_FILE" value="false" />
      <option name="Angular" value="false" />
      <option name="AsciiDoc" value="false" />
      <option name="CSS" value="false" />
      <option name="GENERAL_JSON_FILE" value="false" />
      <option name="GENERAL_YAML_FILE" value="false" />
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="HTTP_CLIENT_ENVIRONMENT" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="KUBERNETES_RESOURCE" value="false" />
      <option name="MAVEN" value="false" />
      <option name="OTHER" value="true" />
      <option name="PROTO" value="false" />
      <option name="PROTOTEXT" value="false" />
      <option name="PUML" value="false" />
      <option name="Properties" value="false" />
      <option name="QUTE" value="false" />
      <option name="REQUEST" value="false" />
      <option name="SHELL_SCRIPT" value="false" />
      <option name="SQL" value="false" />
      <option name="TypeScript" value="false" />
      <option name="Vue" value="false" />
      <option name="XML" value="false" />
      <option name="browserslist" value="false" />
    </context>
  </template>
  <template name="tdd 11a - aiCreatePetResource" value="Create a Jakarta Rest resource class that satisfies all of the unit tests in the provided test class. These are constraints that I don't want to violate:&#10;&#10;- Only create two methods&#10;- Don't throw any exceptions within the methods&#10;- Don't create variables that aren't needed&#10;&#10;Other preferences I have in order from most important to least important:&#10;- Prefer constructor injection&#10;- Optional input parameters should be represented as Optionals&#10;- Prefer using map functions when using Optionals&#10;- Prefer returning objects other than Response&#10;&#10;----------&#10;This is the test class:" description="Prompt to have AI generate the PetResource class" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="ANY_OPENAPI_JSON_FILE" value="false" />
      <option name="ANY_OPENAPI_YAML_FILE" value="false" />
      <option name="Angular" value="false" />
      <option name="AsciiDoc" value="false" />
      <option name="CSS" value="false" />
      <option name="GENERAL_JSON_FILE" value="false" />
      <option name="GENERAL_YAML_FILE" value="false" />
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="HTTP_CLIENT_ENVIRONMENT" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="KUBERNETES_RESOURCE" value="false" />
      <option name="MAVEN" value="false" />
      <option name="OTHER" value="true" />
      <option name="PROTO" value="false" />
      <option name="PROTOTEXT" value="false" />
      <option name="PUML" value="false" />
      <option name="Properties" value="false" />
      <option name="QUTE" value="false" />
      <option name="REQUEST" value="false" />
      <option name="SHELL_SCRIPT" value="false" />
      <option name="SQL" value="false" />
      <option name="TypeScript" value="false" />
      <option name="Vue" value="false" />
      <option name="XML" value="false" />
      <option name="browserslist" value="false" />
    </context>
  </template>
</templateSet>